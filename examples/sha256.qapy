ROR = lambda x, r: x >> r | x << 32 - r
def MAJ(x, y, z):
    t = x & y
    return [t[i] + z[i] * (x[i] + y[i] - t[i] * 2) for i in range(32)]
def CHO(x, y, z):
    return [y[i] if x[i] else z[i] for i in range(32)]
K = [
    b32(0x428A2F98), b32(0x71374491), b32(0xB5C0FBCF), b32(0xE9B5DBA5),
    b32(0x3956C25B), b32(0x59F111F1), b32(0x923F82A4), b32(0xAB1C5ED5),
    b32(0xD807AA98), b32(0x12835B01), b32(0x243185BE), b32(0x550C7DC3),
    b32(0x72BE5D74), b32(0x80DEB1FE), b32(0x9BDC06A7), b32(0xC19BF174),
    b32(0xE49B69C1), b32(0xEFBE4786), b32(0x0FC19DC6), b32(0x240CA1CC),
    b32(0x2DE92C6F), b32(0x4A7484AA), b32(0x5CB0A9DC), b32(0x76F988DA),
    b32(0x983E5152), b32(0xA831C66D), b32(0xB00327C8), b32(0xBF597FC7),
    b32(0xC6E00BF3), b32(0xD5A79147), b32(0x06CA6351), b32(0x14292967),
    b32(0x27B70A85), b32(0x2E1B2138), b32(0x4D2C6DFC), b32(0x53380D13),
    b32(0x650A7354), b32(0x766A0ABB), b32(0x81C2C92E), b32(0x92722C85),
    b32(0xA2BFE8A1), b32(0xA81A664B), b32(0xC24B8B70), b32(0xC76C51A3),
    b32(0xD192E819), b32(0xD6990624), b32(0xF40E3585), b32(0x106AA070),
    b32(0x19A4C116), b32(0x1E376C08), b32(0x2748774C), b32(0x34B0BCB5),
    b32(0x391C0CB3), b32(0x4ED8AA4A), b32(0x5B9CCA4F), b32(0x682e6ff3),
    b32(0x748f82ee), b32(0x78a5636f), b32(0x84c87814), b32(0x8cc70208),
    b32(0x90befffa), b32(0xa4506ceb), b32(0xbef9a3f7), b32(0xc67178f2),
]
V = [
    b32(0x6A09E667), b32(0xBB67AE85), b32(0x3C6EF372), b32(0xA54FF53A),
    b32(0x510E527F), b32(0x9B05688C), b32(0x1F83D9AB), b32(0x5BE0CD19),
]
def compress(V, W):
    W = concat(W, repeat([b32(0)], 48))
    for j in range(16, 64):
        S0 = ROR(W[j - 15], 7) ^ ROR(W[j - 15], 18) ^ W[j - 15] >> 3
        S1 = ROR(W[j - 2], 17) ^ ROR(W[j - 2], 19) ^ W[j - 2] >> 10
        W[j] = {W[j - 16], S0, W[j - 7], S1}
    A = V[0]
    B = V[1]
    C = V[2]
    D = V[3]
    E = V[4]
    F = V[5]
    G = V[6]
    H = V[7]
    for j in range(64):
        S0 = ROR(A, 2) ^ ROR(A, 13) ^ ROR(A, 22)
        MJ = MAJ(A, B, C)
        S1 = ROR(E, 6) ^ ROR(E, 11) ^ ROR(E, 25)
        CH = CHO(E, F, G)
        A, B, C, D, E, F, G, H = {H, S1, CH, K[j], W[j], S0, MJ}, A, B, C, {H, S1, CH, K[j], W[j], D}, E, F, G
    V[0] = A + V[0]
    V[1] = B + V[1]
    V[2] = C + V[2]
    V[3] = D + V[3]
    V[4] = E + V[4]
    V[5] = F + V[5]
    V[6] = G + V[6]
    V[7] = H + V[7]
    return V
W = [b32(secret(fmt('W[{}]', i))) for i in range(16)]
V = compress(V, W)
for i in range(8):
    reveal(fmt('V[{}]', i), V[i])
